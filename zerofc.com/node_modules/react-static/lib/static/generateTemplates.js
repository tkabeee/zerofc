"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _chunkBuilder = require("../utils/chunkBuilder");

var _default =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(state) {
    var paths, templates, reactStaticUniversalPath, file, dynamicRoutesPath;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            paths = state.config.paths, templates = state.templates; // convert Windows-style path separators to the Unix style to ensure sure the
            // string literal is valid and doesn't contain escaped characters

            reactStaticUniversalPath = process.env.REACT_STATIC_UNIVERSAL_PATH.split('\\').join('/');
            file = "\n".concat(process.env.NODE_ENV === 'production' ? "\nimport React from 'react'\nimport universal, { setHasBabelPlugin } from '".concat(reactStaticUniversalPath, "'\n\nsetHasBabelPlugin()\n\nconst universalOptions = {\n  loading: () => null,\n  error: props => {\n    console.error(props.error);\n    return <div>An error occurred loading this page's template. More information is available in the console.</div>;\n  },\n  ignoreBabelRename: true\n}\n\n").concat(templates.map(function (template, index) {
              var chunkName = ''; // relative resolving produces the wrong path, a "../" is missing
              // as the files looks equal, we simple use an absolute path then

              if (!paths.DIST.startsWith(paths.ROOT)) {
                chunkName = "/* webpackChunkName: \"".concat((0, _chunkBuilder.chunkNameFromFile)(template), "\" */");
              }

              return "const t_".concat(index, " = universal(import('").concat(template, "'").concat(chunkName, "), universalOptions)\n      t_").concat(index, ".template = '").concat(template, "'\n      ");
            }).join('\n'), "\n\n// Template Map\nexport default {\n  ").concat(templates.map(function (template, index) {
              return "'".concat(template, "': t_").concat(index);
            }).join(',\n'), "\n}\n// Not Found Template\nexport const notFoundTemplate = ").concat(JSON.stringify(templates[0]), "\n") : "\n  \n// Template Map\nexport default {\n  ".concat(templates.map(function (template) {
              return "'".concat(template, "': require('").concat(template, "').default");
            }).join(',\n'), "\n}\n\nexport const notFoundTemplate = '").concat(templates[0], "'\n"), "\n");
            dynamicRoutesPath = _path.default.join(process.env.REACT_STATIC_TEMPLATES_PATH);
            _context.next = 6;
            return _fsExtra.default.remove(dynamicRoutesPath);

          case 6:
            _context.next = 8;
            return _fsExtra.default.outputFile(dynamicRoutesPath, file);

          case 8:
            return _context.abrupt("return", state);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZ2VuZXJhdGVUZW1wbGF0ZXMuanMiXSwibmFtZXMiOlsic3RhdGUiLCJwYXRocyIsImNvbmZpZyIsInRlbXBsYXRlcyIsInJlYWN0U3RhdGljVW5pdmVyc2FsUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJSRUFDVF9TVEFUSUNfVU5JVkVSU0FMX1BBVEgiLCJzcGxpdCIsImpvaW4iLCJmaWxlIiwiTk9ERV9FTlYiLCJtYXAiLCJ0ZW1wbGF0ZSIsImluZGV4IiwiY2h1bmtOYW1lIiwiRElTVCIsInN0YXJ0c1dpdGgiLCJST09UIiwiSlNPTiIsInN0cmluZ2lmeSIsImR5bmFtaWNSb3V0ZXNQYXRoIiwicGF0aCIsIlJFQUNUX1NUQVRJQ19URU1QTEFURVNfUEFUSCIsImZzIiwicmVtb3ZlIiwib3V0cHV0RmlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7OzRCQUVlLGlCQUFNQSxLQUFOO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVEQyxZQUFBQSxLQUZDLEdBSVRELEtBSlMsQ0FFWEUsTUFGVyxDQUVERCxLQUZDLEVBR1hFLFNBSFcsR0FJVEgsS0FKUyxDQUdYRyxTQUhXLEVBTWI7QUFDQTs7QUFDTUMsWUFBQUEsd0JBUk8sR0FRb0JDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQywyQkFBWixDQUF3Q0MsS0FBeEMsQ0FDL0IsSUFEK0IsRUFFL0JDLElBRitCLENBRTFCLEdBRjBCLENBUnBCO0FBWVBDLFlBQUFBLElBWk8sZUFjYkwsT0FBTyxDQUFDQyxHQUFSLENBQVlLLFFBQVosS0FBeUIsWUFBekIsd0ZBRzhDUCx3QkFIOUMsK1NBZ0JBRCxTQUFTLENBQ1JTLEdBREQsQ0FDSyxVQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBcUI7QUFDeEIsa0JBQUlDLFNBQVMsR0FBRyxFQUFoQixDQUR3QixDQUd4QjtBQUNBOztBQUVBLGtCQUFJLENBQUNkLEtBQUssQ0FBQ2UsSUFBTixDQUFXQyxVQUFYLENBQXNCaEIsS0FBSyxDQUFDaUIsSUFBNUIsQ0FBTCxFQUF3QztBQUN0Q0gsZ0JBQUFBLFNBQVMsb0NBQTRCLHFDQUFrQkYsUUFBbEIsQ0FBNUIsVUFBVDtBQUNEOztBQUVELHVDQUFrQkMsS0FBbEIsa0NBQStDRCxRQUEvQyxjQUEyREUsU0FBM0QsMkNBQ01ELEtBRE4sMEJBQzJCRCxRQUQzQjtBQUdELGFBZEQsRUFlQ0osSUFmRCxDQWVNLElBZk4sQ0FoQkEsc0RBbUNFTixTQUFTLENBQUNTLEdBQVYsQ0FBYyxVQUFDQyxRQUFELEVBQVdDLEtBQVg7QUFBQSxnQ0FBeUJELFFBQXpCLGtCQUF5Q0MsS0FBekM7QUFBQSxhQUFkLEVBQWdFTCxJQUFoRSxDQUFxRSxLQUFyRSxDQW5DRix5RUFzQ2dDVSxJQUFJLENBQUNDLFNBQUwsQ0FBZWpCLFNBQVMsQ0FBQyxDQUFELENBQXhCLENBdENoQywrREE0Q0VBLFNBQVMsQ0FDUlMsR0FERCxDQUNLLFVBQUFDLFFBQVE7QUFBQSxnQ0FBUUEsUUFBUix5QkFBK0JBLFFBQS9CO0FBQUEsYUFEYixFQUVDSixJQUZELENBRU0sS0FGTixDQTVDRixxREFpRGlDTixTQUFTLENBQUMsQ0FBRCxDQWpEMUMsUUFkYTtBQW9FUGtCLFlBQUFBLGlCQXBFTyxHQW9FYUMsY0FBS2IsSUFBTCxDQUFVSixPQUFPLENBQUNDLEdBQVIsQ0FBWWlCLDJCQUF0QixDQXBFYjtBQUFBO0FBQUEsbUJBcUVQQyxpQkFBR0MsTUFBSCxDQUFVSixpQkFBVixDQXJFTzs7QUFBQTtBQUFBO0FBQUEsbUJBc0VQRyxpQkFBR0UsVUFBSCxDQUFjTCxpQkFBZCxFQUFpQ1gsSUFBakMsQ0F0RU87O0FBQUE7QUFBQSw2Q0E0RU5WLEtBNUVNOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IHsgY2h1bmtOYW1lRnJvbUZpbGUgfSBmcm9tICcuLi91dGlscy9jaHVua0J1aWxkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIHN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbmZpZzogeyBwYXRocyB9LFxuICAgIHRlbXBsYXRlcyxcbiAgfSA9IHN0YXRlXG5cbiAgLy8gY29udmVydCBXaW5kb3dzLXN0eWxlIHBhdGggc2VwYXJhdG9ycyB0byB0aGUgVW5peCBzdHlsZSB0byBlbnN1cmUgc3VyZSB0aGVcbiAgLy8gc3RyaW5nIGxpdGVyYWwgaXMgdmFsaWQgYW5kIGRvZXNuJ3QgY29udGFpbiBlc2NhcGVkIGNoYXJhY3RlcnNcbiAgY29uc3QgcmVhY3RTdGF0aWNVbml2ZXJzYWxQYXRoID0gcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX1VOSVZFUlNBTF9QQVRILnNwbGl0KFxuICAgICdcXFxcJ1xuICApLmpvaW4oJy8nKVxuXG4gIGNvbnN0IGZpbGUgPSBgXG4ke1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBgXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgdW5pdmVyc2FsLCB7IHNldEhhc0JhYmVsUGx1Z2luIH0gZnJvbSAnJHtyZWFjdFN0YXRpY1VuaXZlcnNhbFBhdGh9J1xuXG5zZXRIYXNCYWJlbFBsdWdpbigpXG5cbmNvbnN0IHVuaXZlcnNhbE9wdGlvbnMgPSB7XG4gIGxvYWRpbmc6ICgpID0+IG51bGwsXG4gIGVycm9yOiBwcm9wcyA9PiB7XG4gICAgY29uc29sZS5lcnJvcihwcm9wcy5lcnJvcik7XG4gICAgcmV0dXJuIDxkaXY+QW4gZXJyb3Igb2NjdXJyZWQgbG9hZGluZyB0aGlzIHBhZ2UncyB0ZW1wbGF0ZS4gTW9yZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGNvbnNvbGUuPC9kaXY+O1xuICB9LFxuICBpZ25vcmVCYWJlbFJlbmFtZTogdHJ1ZVxufVxuXG4ke3RlbXBsYXRlc1xuICAubWFwKCh0ZW1wbGF0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgY2h1bmtOYW1lID0gJydcblxuICAgIC8vIHJlbGF0aXZlIHJlc29sdmluZyBwcm9kdWNlcyB0aGUgd3JvbmcgcGF0aCwgYSBcIi4uL1wiIGlzIG1pc3NpbmdcbiAgICAvLyBhcyB0aGUgZmlsZXMgbG9va3MgZXF1YWwsIHdlIHNpbXBsZSB1c2UgYW4gYWJzb2x1dGUgcGF0aCB0aGVuXG5cbiAgICBpZiAoIXBhdGhzLkRJU1Quc3RhcnRzV2l0aChwYXRocy5ST09UKSkge1xuICAgICAgY2h1bmtOYW1lID0gYC8qIHdlYnBhY2tDaHVua05hbWU6IFwiJHtjaHVua05hbWVGcm9tRmlsZSh0ZW1wbGF0ZSl9XCIgKi9gXG4gICAgfVxuXG4gICAgcmV0dXJuIGBjb25zdCB0XyR7aW5kZXh9ID0gdW5pdmVyc2FsKGltcG9ydCgnJHt0ZW1wbGF0ZX0nJHtjaHVua05hbWV9KSwgdW5pdmVyc2FsT3B0aW9ucylcbiAgICAgIHRfJHtpbmRleH0udGVtcGxhdGUgPSAnJHt0ZW1wbGF0ZX0nXG4gICAgICBgXG4gIH0pXG4gIC5qb2luKCdcXG4nKX1cblxuLy8gVGVtcGxhdGUgTWFwXG5leHBvcnQgZGVmYXVsdCB7XG4gICR7dGVtcGxhdGVzLm1hcCgodGVtcGxhdGUsIGluZGV4KSA9PiBgJyR7dGVtcGxhdGV9JzogdF8ke2luZGV4fWApLmpvaW4oJyxcXG4nKX1cbn1cbi8vIE5vdCBGb3VuZCBUZW1wbGF0ZVxuZXhwb3J0IGNvbnN0IG5vdEZvdW5kVGVtcGxhdGUgPSAke0pTT04uc3RyaW5naWZ5KHRlbXBsYXRlc1swXSl9XG5gXG4gICAgOiBgXG4gIFxuLy8gVGVtcGxhdGUgTWFwXG5leHBvcnQgZGVmYXVsdCB7XG4gICR7dGVtcGxhdGVzXG4gICAgLm1hcCh0ZW1wbGF0ZSA9PiBgJyR7dGVtcGxhdGV9JzogcmVxdWlyZSgnJHt0ZW1wbGF0ZX0nKS5kZWZhdWx0YClcbiAgICAuam9pbignLFxcbicpfVxufVxuXG5leHBvcnQgY29uc3Qgbm90Rm91bmRUZW1wbGF0ZSA9ICcke3RlbXBsYXRlc1swXX0nXG5gXG59XG5gXG5cbiAgY29uc3QgZHluYW1pY1JvdXRlc1BhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX1RFTVBMQVRFU19QQVRIKVxuICBhd2FpdCBmcy5yZW1vdmUoZHluYW1pY1JvdXRlc1BhdGgpXG4gIGF3YWl0IGZzLm91dHB1dEZpbGUoZHluYW1pY1JvdXRlc1BhdGgsIGZpbGUpXG5cbiAgLy8gV2UgaGF2ZSB0byB3YWl0IGhlcmUgZm9yIGEgc21pZGdlLCBiZWNhdXNlIHdlYnBhY2sgd2F0Y2hlciBpc1xuICAvLyBvdmVybHkgYWdncmVzc2l2ZSBvbiBmaXJzdCBzdGFydFxuICAvLyBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSlcblxuICByZXR1cm4gc3RhdGVcbn1cbiJdfQ==