"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _autoprefixer = _interopRequireDefault(require("autoprefixer"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _postcssFlexbugsFixes = _interopRequireDefault(require("postcss-flexbugs-fixes"));

function initCSSLoader() {
  var cssLoader = [{
    loader: 'css-loader',
    options: {
      importLoaders: 1,
      sourceMap: false
    }
  }, {
    loader: 'postcss-loader',
    options: {
      // Necessary for external CSS imports to work
      // https://github.com/facebookincubator/create-react-app/issues/2677
      sourceMap: true,
      ident: 'postcss',
      plugins: function plugins() {
        return [_postcssFlexbugsFixes.default, (0, _autoprefixer.default)({
          browsers: ['>1%', 'last 4 versions', 'Firefox ESR', 'not ie < 9'],
          flexbox: 'no-2009' // I'd opt in for this - safari 9 & IE 10.

        })];
      }
    }
  }];
  return cssLoader;
}

function _default(_ref) {
  var stage = _ref.stage,
      isNode = _ref.isNode;
  var cssLoader = initCSSLoader();

  if (stage === 'node' || isNode) {
    return {
      test: /\.css$/,
      loader: cssLoader
    };
  }

  cssLoader = [_extractCssChunksWebpackPlugin.default.loader].concat((0, _toConsumableArray2.default)(cssLoader)); // seeing as it's HMR, why not :)

  return {
    test: /\.css$/,
    loader: cssLoader
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdGF0aWMvd2VicGFjay9ydWxlcy9jc3NMb2FkZXIuanMiXSwibmFtZXMiOlsiaW5pdENTU0xvYWRlciIsImNzc0xvYWRlciIsImxvYWRlciIsIm9wdGlvbnMiLCJpbXBvcnRMb2FkZXJzIiwic291cmNlTWFwIiwiaWRlbnQiLCJwbHVnaW5zIiwicG9zdGNzc0ZsZXhidWdzRml4ZXMiLCJicm93c2VycyIsImZsZXhib3giLCJzdGFnZSIsImlzTm9kZSIsInRlc3QiLCJFeHRyYWN0Q3NzQ2h1bmtzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLFNBQVNBLGFBQVQsR0FBeUI7QUFDdkIsTUFBTUMsU0FBUyxHQUFHLENBQ2hCO0FBQ0VDLElBQUFBLE1BQU0sRUFBRSxZQURWO0FBRUVDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxhQUFhLEVBQUUsQ0FEUjtBQUVQQyxNQUFBQSxTQUFTLEVBQUU7QUFGSjtBQUZYLEdBRGdCLEVBUWhCO0FBQ0VILElBQUFBLE1BQU0sRUFBRSxnQkFEVjtBQUVFQyxJQUFBQSxPQUFPLEVBQUU7QUFDUDtBQUNBO0FBQ0FFLE1BQUFBLFNBQVMsRUFBRSxJQUhKO0FBSVBDLE1BQUFBLEtBQUssRUFBRSxTQUpBO0FBS1BDLE1BQUFBLE9BQU8sRUFBRTtBQUFBLGVBQU0sQ0FDYkMsNkJBRGEsRUFFYiwyQkFBYTtBQUNYQyxVQUFBQSxRQUFRLEVBQUUsQ0FDUixLQURRLEVBRVIsaUJBRlEsRUFHUixhQUhRLEVBSVIsWUFKUSxDQURDO0FBT1hDLFVBQUFBLE9BQU8sRUFBRSxTQVBFLENBT1M7O0FBUFQsU0FBYixDQUZhLENBQU47QUFBQTtBQUxGO0FBRlgsR0FSZ0IsQ0FBbEI7QUE4QkEsU0FBT1QsU0FBUDtBQUNEOztBQUVjLHdCQUE0QjtBQUFBLE1BQWpCVSxLQUFpQixRQUFqQkEsS0FBaUI7QUFBQSxNQUFWQyxNQUFVLFFBQVZBLE1BQVU7QUFDekMsTUFBSVgsU0FBUyxHQUFHRCxhQUFhLEVBQTdCOztBQUNBLE1BQUlXLEtBQUssS0FBSyxNQUFWLElBQW9CQyxNQUF4QixFQUFnQztBQUM5QixXQUFPO0FBQ0xDLE1BQUFBLElBQUksRUFBRSxRQUREO0FBRUxYLE1BQUFBLE1BQU0sRUFBRUQ7QUFGSCxLQUFQO0FBSUQ7O0FBRURBLEVBQUFBLFNBQVMsSUFBSWEsdUNBQWlCWixNQUFyQiwwQ0FBZ0NELFNBQWhDLEVBQVQsQ0FUeUMsQ0FTVzs7QUFFcEQsU0FBTztBQUNMWSxJQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMWCxJQUFBQSxNQUFNLEVBQUVEO0FBRkgsR0FBUDtBQUlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF1dG9wcmVmaXhlciBmcm9tICdhdXRvcHJlZml4ZXInXG5pbXBvcnQgRXh0cmFjdENzc0NodW5rcyBmcm9tICdleHRyYWN0LWNzcy1jaHVua3Mtd2VicGFjay1wbHVnaW4nXG5pbXBvcnQgcG9zdGNzc0ZsZXhidWdzRml4ZXMgZnJvbSAncG9zdGNzcy1mbGV4YnVncy1maXhlcydcblxuZnVuY3Rpb24gaW5pdENTU0xvYWRlcigpIHtcbiAgY29uc3QgY3NzTG9hZGVyID0gW1xuICAgIHtcbiAgICAgIGxvYWRlcjogJ2Nzcy1sb2FkZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBpbXBvcnRMb2FkZXJzOiAxLFxuICAgICAgICBzb3VyY2VNYXA6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxvYWRlcjogJ3Bvc3Rjc3MtbG9hZGVyJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgLy8gTmVjZXNzYXJ5IGZvciBleHRlcm5hbCBDU1MgaW1wb3J0cyB0byB3b3JrXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2luY3ViYXRvci9jcmVhdGUtcmVhY3QtYXBwL2lzc3Vlcy8yNjc3XG4gICAgICAgIHNvdXJjZU1hcDogdHJ1ZSxcbiAgICAgICAgaWRlbnQ6ICdwb3N0Y3NzJyxcbiAgICAgICAgcGx1Z2luczogKCkgPT4gW1xuICAgICAgICAgIHBvc3Rjc3NGbGV4YnVnc0ZpeGVzLFxuICAgICAgICAgIGF1dG9wcmVmaXhlcih7XG4gICAgICAgICAgICBicm93c2VyczogW1xuICAgICAgICAgICAgICAnPjElJyxcbiAgICAgICAgICAgICAgJ2xhc3QgNCB2ZXJzaW9ucycsXG4gICAgICAgICAgICAgICdGaXJlZm94IEVTUicsXG4gICAgICAgICAgICAgICdub3QgaWUgPCA5JywgLy8gUmVhY3QgZG9lc24ndCBzdXBwb3J0IElFOCBhbnl3YXlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBmbGV4Ym94OiAnbm8tMjAwOScsIC8vIEknZCBvcHQgaW4gZm9yIHRoaXMgLSBzYWZhcmkgOSAmIElFIDEwLlxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9LFxuICBdXG4gIHJldHVybiBjc3NMb2FkZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeyBzdGFnZSwgaXNOb2RlIH0pIHtcbiAgbGV0IGNzc0xvYWRlciA9IGluaXRDU1NMb2FkZXIoKVxuICBpZiAoc3RhZ2UgPT09ICdub2RlJyB8fCBpc05vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVzdDogL1xcLmNzcyQvLFxuICAgICAgbG9hZGVyOiBjc3NMb2FkZXIsXG4gICAgfVxuICB9XG5cbiAgY3NzTG9hZGVyID0gW0V4dHJhY3RDc3NDaHVua3MubG9hZGVyLCAuLi5jc3NMb2FkZXJdIC8vIHNlZWluZyBhcyBpdCdzIEhNUiwgd2h5IG5vdCA6KVxuXG4gIHJldHVybiB7XG4gICAgdGVzdDogL1xcLmNzcyQvLFxuICAgIGxvYWRlcjogY3NzTG9hZGVyLFxuICB9XG59XG4iXX0=