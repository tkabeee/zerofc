"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _webpack = _interopRequireDefault(require("webpack"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _path = _interopRequireDefault(require("path"));

var _rules = _interopRequireDefault(require("./rules"));

function _default(_ref) {
  var config = _ref.config;
  var _config$paths = config.paths,
      ROOT = _config$paths.ROOT,
      DIST = _config$paths.DIST,
      NODE_MODULES = _config$paths.NODE_MODULES,
      SRC = _config$paths.SRC,
      HTML_TEMPLATE = _config$paths.HTML_TEMPLATE;
  process.env.REACT_STATIC_BASE_PATH = config.basePath;
  process.env.REACT_STATIC_PUBLIC_PATH = config.publicPath;
  process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath;
  return {
    mode: 'development',
    optimization: {
      noEmitOnErrors: true,
      concatenateModules: true
    },
    context: _path.default.resolve(__dirname, '../../../node_modules'),
    entry: ["webpack-dev-server/client?".concat(config.devServer.host, ":").concat(config.devServer.port), 'webpack/hot/only-dev-server'].concat((0, _toConsumableArray2.default)(config.disableRuntime ? [] : [require.resolve('../../bootstrapPlugins'), require.resolve('../../bootstrapTemplates')]), [_path.default.resolve(ROOT, config.entry)]).filter(Boolean),
    output: {
      filename: '[name].js',
      // never hash dev code
      chunkFilename: 'templates/[name].js',
      path: DIST,
      publicPath: process.env.REACT_STATIC_ASSETS_PATH || '/'
    },
    module: {
      rules: (0, _rules.default)({
        config: config,
        stage: 'dev'
      }),
      strictExportPresence: true
    },
    resolve: {
      modules: [NODE_MODULES, SRC, DIST].concat((0, _toConsumableArray2.default)([NODE_MODULES, SRC, DIST].map(function (d) {
        return _path.default.relative(__dirname, d);
      })), ['node_modules']),
      extensions: ['.wasm', '.mjs', '.js', '.json', '.jsx'],
      alias: {
        react: (0, _resolveFrom.default)(config.paths.NODE_MODULES, 'react'),
        'react-dom': (0, _resolveFrom.default)(__dirname, '@hot-loader/react-dom')
      }
    },
    plugins: [new _webpack.default.EnvironmentPlugin(process.env), new _htmlWebpackPlugin.default({
      inject: true,
      template: "!!raw-loader!".concat(HTML_TEMPLATE)
    }), new _webpack.default.HotModuleReplacementPlugin(), new _webpack.default.NamedModulesPlugin(), new _caseSensitivePathsWebpackPlugin.default(), new _extractCssChunksWebpackPlugin.default({
      hot: true
    })],
    devtool: 'cheap-module-source-map'
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGF0aWMvd2VicGFjay93ZWJwYWNrLmNvbmZpZy5kZXYuanMiXSwibmFtZXMiOlsiY29uZmlnIiwicGF0aHMiLCJST09UIiwiRElTVCIsIk5PREVfTU9EVUxFUyIsIlNSQyIsIkhUTUxfVEVNUExBVEUiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfU1RBVElDX0JBU0VfUEFUSCIsImJhc2VQYXRoIiwiUkVBQ1RfU1RBVElDX1BVQkxJQ19QQVRIIiwicHVibGljUGF0aCIsIlJFQUNUX1NUQVRJQ19BU1NFVFNfUEFUSCIsImFzc2V0c1BhdGgiLCJtb2RlIiwib3B0aW1pemF0aW9uIiwibm9FbWl0T25FcnJvcnMiLCJjb25jYXRlbmF0ZU1vZHVsZXMiLCJjb250ZXh0IiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJlbnRyeSIsImRldlNlcnZlciIsImhvc3QiLCJwb3J0IiwiZGlzYWJsZVJ1bnRpbWUiLCJyZXF1aXJlIiwiZmlsdGVyIiwiQm9vbGVhbiIsIm91dHB1dCIsImZpbGVuYW1lIiwiY2h1bmtGaWxlbmFtZSIsIm1vZHVsZSIsInJ1bGVzIiwic3RhZ2UiLCJzdHJpY3RFeHBvcnRQcmVzZW5jZSIsIm1vZHVsZXMiLCJtYXAiLCJkIiwicmVsYXRpdmUiLCJleHRlbnNpb25zIiwiYWxpYXMiLCJyZWFjdCIsInBsdWdpbnMiLCJ3ZWJwYWNrIiwiRW52aXJvbm1lbnRQbHVnaW4iLCJIdG1sV2VicGFja1BsdWdpbiIsImluamVjdCIsInRlbXBsYXRlIiwiSG90TW9kdWxlUmVwbGFjZW1lbnRQbHVnaW4iLCJOYW1lZE1vZHVsZXNQbHVnaW4iLCJDYXNlU2Vuc2l0aXZlUGF0aHNQbHVnaW4iLCJFeHRyYWN0Q3NzQ2h1bmtzIiwiaG90IiwiZGV2dG9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFZSx3QkFBcUI7QUFBQSxNQUFWQSxNQUFVLFFBQVZB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TUFBTSxFQUFFLElBRFk7QUFFcEJDLE1BQUFBLFFBQVEseUJBQWtCNUMsYUFBbEI7QUFGWSxLQUF0QixDQUZPLEVBTVAsSUFBSXdDLGlCQUFRSywwQkFBWixFQU5PLEVBT1AsSUFBSUwsaUJBQVFNLGtCQUFaLEVBUE8sRUFRUCxJQUFJQyx3Q0FBSixFQVJPLEVBU1AsSUFBSUMsc0NBQUosQ0FBcUI7QUFBRUMsTUFBQUEsR0FBRyxFQUFFO0FBQVAsS0FBckIsQ0FUTyxDQTVDSjtBQXdETEMsSUFBQUEsT0FBTyxFQUFFO0FBeERKLEdBQVA7QUEwREQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2VicGFjayBmcm9tICd3ZWJwYWNrJ1xuaW1wb3J0IHJlc29sdmVGcm9tIGZyb20gJ3Jlc29sdmUtZnJvbSdcbmltcG9ydCBIdG1sV2VicGFja1BsdWdpbiBmcm9tICdodG1sLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IENhc2VTZW5zaXRpdmVQYXRoc1BsdWdpbiBmcm9tICdjYXNlLXNlbnNpdGl2ZS1wYXRocy13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBFeHRyYWN0Q3NzQ2h1bmtzIGZyb20gJ2V4dHJhY3QtY3NzLWNodW5rcy13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCBydWxlcyBmcm9tICcuL3J1bGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih7IGNvbmZpZyB9KSB7XG4gIGNvbnN0IHsgUk9PVCwgRElTVCwgTk9ERV9NT0RVTEVTLCBTUkMsIEhUTUxfVEVNUExBVEUgfSA9IGNvbmZpZy5wYXRoc1xuXG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19CQVNFX1BBVEggPSBjb25maWcuYmFzZVBhdGhcbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX1BVQkxJQ19QQVRIID0gY29uZmlnLnB1YmxpY1BhdGhcbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX0FTU0VUU19QQVRIID0gY29uZmlnLmFzc2V0c1BhdGhcblxuICByZXR1cm4ge1xuICAgIG1vZGU6ICdkZXZlbG9wbWVudCcsXG4gICAgb3B0aW1pemF0aW9uOiB7XG4gICAgICBub0VtaXRPbkVycm9yczogdHJ1ZSxcbiAgICAgIGNvbmNhdGVuYXRlTW9kdWxlczogdHJ1ZSxcbiAgICB9LFxuICAgIGNvbnRleHQ6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi9ub2RlX21vZHVsZXMnKSxcbiAgICBlbnRyeTogW1xuICAgICAgYHdlYnBhY2stZGV2LXNlcnZlci9jbGllbnQ/JHtjb25maWcuZGV2U2VydmVyLmhvc3R9OiR7XG4gICAgICAgIGNvbmZpZy5kZXZTZXJ2ZXIucG9ydFxuICAgICAgfWAsXG4gICAgICAnd2VicGFjay9ob3Qvb25seS1kZXYtc2VydmVyJyxcbiAgICAgIC4uLihjb25maWcuZGlzYWJsZVJ1bnRpbWVcbiAgICAgICAgPyBbXVxuICAgICAgICA6IFtcbiAgICAgICAgICAgIHJlcXVpcmUucmVzb2x2ZSgnLi4vLi4vYm9vdHN0cmFwUGx1Z2lucycpLFxuICAgICAgICAgICAgcmVxdWlyZS5yZXNvbHZlKCcuLi8uLi9ib290c3RyYXBUZW1wbGF0ZXMnKSxcbiAgICAgICAgICBdKSxcbiAgICAgIHBhdGgucmVzb2x2ZShST09ULCBjb25maWcuZW50cnkpLFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pLFxuICAgIG91dHB1dDoge1xuICAgICAgZmlsZW5hbWU6ICdbbmFtZV0uanMnLCAvLyBuZXZlciBoYXNoIGRldiBjb2RlXG4gICAgICBjaHVua0ZpbGVuYW1lOiAndGVtcGxhdGVzL1tuYW1lXS5qcycsXG4gICAgICBwYXRoOiBESVNULFxuICAgICAgcHVibGljUGF0aDogcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX0FTU0VUU19QQVRIIHx8ICcvJyxcbiAgICB9LFxuICAgIG1vZHVsZToge1xuICAgICAgcnVsZXM6IHJ1bGVzKHsgY29uZmlnLCBzdGFnZTogJ2RldicgfSksXG4gICAgICBzdHJpY3RFeHBvcnRQcmVzZW5jZTogdHJ1ZSxcbiAgICB9LFxuICAgIHJlc29sdmU6IHtcbiAgICAgIG1vZHVsZXM6IFtcbiAgICAgICAgTk9ERV9NT0RVTEVTLFxuICAgICAgICBTUkMsXG4gICAgICAgIERJU1QsXG4gICAgICAgIC4uLltOT0RFX01PRFVMRVMsIFNSQywgRElTVF0ubWFwKGQgPT4gcGF0aC5yZWxhdGl2ZShfX2Rpcm5hbWUsIGQpKSxcbiAgICAgICAgJ25vZGVfbW9kdWxlcycsXG4gICAgICBdLFxuICAgICAgZXh0ZW5zaW9uczogWycud2FzbScsICcubWpzJywgJy5qcycsICcuanNvbicsICcuanN4J10sXG4gICAgICBhbGlhczoge1xuICAgICAgICByZWFjdDogcmVzb2x2ZUZyb20oY29uZmlnLnBhdGhzLk5PREVfTU9EVUxFUywgJ3JlYWN0JyksXG4gICAgICAgICdyZWFjdC1kb20nOiByZXNvbHZlRnJvbShfX2Rpcm5hbWUsICdAaG90LWxvYWRlci9yZWFjdC1kb20nKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbXG4gICAgICBuZXcgd2VicGFjay5FbnZpcm9ubWVudFBsdWdpbihwcm9jZXNzLmVudiksXG4gICAgICBuZXcgSHRtbFdlYnBhY2tQbHVnaW4oe1xuICAgICAgICBpbmplY3Q6IHRydWUsXG4gICAgICAgIHRlbXBsYXRlOiBgISFyYXctbG9hZGVyISR7SFRNTF9URU1QTEFURX1gLFxuICAgICAgfSksXG4gICAgICBuZXcgd2VicGFjay5Ib3RNb2R1bGVSZXBsYWNlbWVudFBsdWdpbigpLFxuICAgICAgbmV3IHdlYnBhY2suTmFtZWRNb2R1bGVzUGx1Z2luKCksXG4gICAgICBuZXcgQ2FzZVNlbnNpdGl2ZVBhdGhzUGx1Z2luKCksXG4gICAgICBuZXcgRXh0cmFjdENzc0NodW5rcyh7IGhvdDogdHJ1ZSB9KSxcbiAgICAgIC8vIG5ldyBXZWJwYWNrRGFzaGJvYXJkKCksXG4gICAgXSxcbiAgICBkZXZ0b29sOiAnY2hlYXAtbW9kdWxlLXNvdXJjZS1tYXAnLFxuICB9XG59XG4iXX0=