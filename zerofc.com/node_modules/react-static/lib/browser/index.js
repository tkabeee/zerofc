"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRouteInfo = getRouteInfo;
exports.prefetchData = prefetchData;
exports.prefetchTemplate = prefetchTemplate;
exports.prefetch = prefetch;
exports.isPrefetchableRoute = isPrefetchableRoute;
exports.plugins = exports.onReloadClientData = exports.registerTemplateForPath = exports.registerTemplates = exports.onReloadTemplates = exports.templateErrorByPath = exports.templatesByPath = exports.templates = exports.registerPlugins = exports.pluginHooks = exports.addPrefetchExcludes = exports.sharedDataByHash = exports.routeErrorByPath = exports.routeInfoByPath = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _axios = _interopRequireDefault(require("axios"));

var _utils = require("./utils");

var _Visibility = _interopRequireDefault(require("./utils/Visibility"));

//
// RouteInfo / RouteData
var routeInfoByPath = {};
exports.routeInfoByPath = routeInfoByPath;
var routeErrorByPath = {};
exports.routeErrorByPath = routeErrorByPath;
var sharedDataByHash = {};
exports.sharedDataByHash = sharedDataByHash;
var inflightRouteInfo = {};
var inflightPropHashes = {};
var prefetchExcludes = [];

var addPrefetchExcludes = function addPrefetchExcludes(excludes) {
  if (!Array.isArray(excludes)) {
    throw new Error('Excludes must be an array of strings/regex!');
  }

  prefetchExcludes = [].concat((0, _toConsumableArray2.default)(prefetchExcludes), (0, _toConsumableArray2.default)(excludes));
};

exports.addPrefetchExcludes = addPrefetchExcludes;
var requestPool = (0, _utils.createPool)({
  concurrency: Number(process.env.REACT_STATIC_PREFETCH_RATE)
}); // Plugins

var pluginHooks = [];
exports.pluginHooks = pluginHooks;

var registerPlugins = function registerPlugins(newPlugins) {
  pluginHooks.splice.apply(pluginHooks, [0, Infinity].concat((0, _toConsumableArray2.default)(newPlugins)));
}; // Templates


exports.registerPlugins = registerPlugins;
var templates = {};
exports.templates = templates;
var templatesByPath = {};
exports.templatesByPath = templatesByPath;
var templateErrorByPath = {};
exports.templateErrorByPath = templateErrorByPath;

var onReloadTemplates = function onReloadTemplates(fn) {
  onReloadTemplates.listeners.push(fn);
  return function () {
    onReloadTemplates.listeners = onReloadTemplates.listeners.filter(function (d) {
      return d !== fn;
    });
  };
};

exports.onReloadTemplates = onReloadTemplates;
onReloadTemplates.listeners = [];

var registerTemplates =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(tmps, notFoundKey) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            Object.keys(templatesByPath).forEach(function (key) {
              delete templatesByPath[key];
            });
            Object.keys(templateErrorByPath).forEach(function (key) {
              delete templateErrorByPath[key];
            });
            Object.keys(templates).forEach(function (key) {
              delete templates[key];
            });
            Object.keys(tmps).forEach(function (key) {
              templates[key] = tmps[key];
            });
            templatesByPath['404'] = templates[notFoundKey];

            if (!(process.env.NODE_ENV === 'development' && typeof document !== 'undefined')) {
              _context.next = 8;
              break;
            }

            _context.next = 8;
            return prefetch(window.location.pathname);

          case 8:
            onReloadTemplates.listeners.forEach(function (fn) {
              return fn();
            });

            if (typeof document !== 'undefined') {
              console.log('React Static: Templates Reloaded');
            }

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function registerTemplates(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.registerTemplates = registerTemplates;

var registerTemplateForPath = function registerTemplateForPath(path, template) {
  path = (0, _utils.getRoutePath)(path);
  templatesByPath[path] = templates[template];
};

exports.registerTemplateForPath = registerTemplateForPath;

var onReloadClientData = function onReloadClientData(fn) {
  Object.keys(routeErrorByPath).forEach(function (key) {
    delete routeErrorByPath[key];
  });
  onReloadClientData.listeners.push(fn);
  return function () {
    onReloadClientData.listeners = onReloadClientData.listeners.filter(function (d) {
      return d !== fn;
    });
  };
};

exports.onReloadClientData = onReloadClientData;
onReloadClientData.listeners = [];

if (typeof document !== 'undefined') {
  init();
} // When in development, init a socket to listen for data changes
// When the data changes, we invalidate and reload all of the route data


function init() {
  // In development, we need to open a socket to listen for changes to data
  if (process.env.REACT_STATIC_ENV === 'development') {
    var io = require('socket.io-client');

    var run =
    /*#__PURE__*/
    function () {
      var _ref2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        var _ref3, port, socket;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return _axios.default.get('/__react-static__/getMessagePort');

              case 3:
                _ref3 = _context2.sent;
                port = _ref3.data.port;
                socket = io("http://localhost:".concat(port));
                socket.on('connect', function () {// Do nothing
                });
                socket.on('message', function (_ref4) {
                  var type = _ref4.type;

                  if (type === 'reloadClientData') {
                    reloadClientData();
                  }
                });
                _context2.next = 14;
                break;

              case 10:
                _context2.prev = 10;
                _context2.t0 = _context2["catch"](0);
                console.log('React-Static data hot-loader websocket encountered the following error:');
                console.error(_context2.t0);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 10]]);
      }));

      return function run() {
        return _ref2.apply(this, arguments);
      };
    }();

    run();
  }

  if (process.env.REACT_STATIC_DISABLE_PRELOAD === 'false') {
    startPreloader();
  }
}

function startPreloader() {
  if (typeof document !== 'undefined') {
    var run = function run() {
      var els = [].slice.call(document.getElementsByTagName('a'));
      els.forEach(function (el) {
        var href = el.getAttribute('href');
        var shouldPrefetch = !(el.getAttribute('prefetch') === 'false');

        if (href && shouldPrefetch) {
          (0, _Visibility.default)(el, function () {
            return prefetch(href);
          });
        }
      });
    };

    setInterval(run, Number(process.env.REACT_STATIC_PRELOAD_POLL_INTERVAL));
  }
}

function reloadClientData() {
  return _reloadClientData.apply(this, arguments);
}

function _reloadClientData() {
  _reloadClientData = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3() {
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            console.log('React Static: Reloading Data...') // Delete all cached data
            ;
            [routeInfoByPath, sharedDataByHash, routeErrorByPath, inflightRouteInfo, inflightPropHashes].forEach(function (part) {
              Object.keys(part).forEach(function (key) {
                delete part[key];
              });
            }); // Prefetch the current route's data before you reload routes

            _context3.next = 4;
            return prefetch(window.location.pathname);

          case 4:
            onReloadClientData.listeners.forEach(function (fn) {
              return fn();
            });

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _reloadClientData.apply(this, arguments);
}

function getRouteInfo(_x3) {
  return _getRouteInfo.apply(this, arguments);
}

function _getRouteInfo() {
  _getRouteInfo = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4(path) {
    var _ref5,
        priority,
        routeInfo,
        _ref8,
        data,
        routeInfoRoot,
        getPath,
        _ref9,
        _data,
        _ref10,
        _data2,
        _args4 = arguments;

    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _ref5 = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {}, priority = _ref5.priority;
            path = (0, _utils.getRoutePath)(path); // Check if we should fetch RouteData for this url et all.

            if (isPrefetchableRoute(path)) {
              _context4.next = 4;
              break;
            }

            return _context4.abrupt("return");

          case 4:
            if (!routeInfoByPath[path]) {
              _context4.next = 6;
              break;
            }

            return _context4.abrupt("return", routeInfoByPath[path]);

          case 6:
            if (!routeErrorByPath[path]) {
              _context4.next = 8;
              break;
            }

            return _context4.abrupt("return");

          case 8:
            _context4.prev = 8;

            if (!(process.env.REACT_STATIC_ENV === 'development')) {
              _context4.next = 18;
              break;
            }

            // In dev, request from the webpack dev server
            if (!inflightRouteInfo[path]) {
              inflightRouteInfo[path] = _axios.default.get("/__react-static__/routeInfo/".concat(path === '/' ? '' : path));
            }

            _context4.next = 13;
            return inflightRouteInfo[path];

          case 13:
            _ref8 = _context4.sent;
            data = _ref8.data;
            routeInfo = data;
            _context4.next = 34;
            break;

          case 18:
            // In production, fetch the JSON file
            // Find the location of the routeInfo.json file
            routeInfoRoot = (process.env.REACT_STATIC_DISABLE_ROUTE_PREFIXING === 'true' ? process.env.REACT_STATIC_SITE_ROOT : process.env.REACT_STATIC_PUBLIC_PATH) || '/';
            getPath = "".concat(routeInfoRoot).concat((0, _utils.pathJoin)(path, 'routeInfo.json')); // If this is a priority call bypass the queue

            if (!priority) {
              _context4.next = 28;
              break;
            }

            _context4.next = 23;
            return _axios.default.get(getPath);

          case 23:
            _ref9 = _context4.sent;
            _data = _ref9.data;
            routeInfo = _data;
            _context4.next = 34;
            break;

          case 28:
            // Otherwise, add it to the queue
            if (!inflightRouteInfo[path]) {
              inflightRouteInfo[path] = requestPool.add(function () {
                return _axios.default.get(getPath);
              });
            }

            _context4.next = 31;
            return inflightRouteInfo[path];

          case 31:
            _ref10 = _context4.sent;
            _data2 = _ref10.data;
            routeInfo = _data2;

          case 34:
            _context4.next = 43;
            break;

          case 36:
            _context4.prev = 36;
            _context4.t0 = _context4["catch"](8);
            // If there was an error, mark the path as errored
            routeErrorByPath[path] = true; // Unless we already fetched the 404 page,
            // try to load info for the 404 page

            if (!(!routeInfoByPath['404'] && !routeErrorByPath['404'])) {
              _context4.next = 42;
              break;
            }

            getRouteInfo('404', {
              priority: priority
            });
            return _context4.abrupt("return");

          case 42:
            return _context4.abrupt("return");

          case 43:
            if (!priority) {
              delete inflightRouteInfo[path];
            }

            if ((0, _typeof2.default)(routeInfo) !== 'object' || !routeInfo.path) {
              // routeInfo must have returned 200, but is not actually
              // a routeInfo object. Mark it as an error and move on silently
              routeErrorByPath[path] = true;
            } else {
              routeInfoByPath[path] = routeInfo;
            }

            return _context4.abrupt("return", routeInfoByPath[path]);

          case 46:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[8, 36]]);
  }));
  return _getRouteInfo.apply(this, arguments);
}

function prefetchData(_x4) {
  return _prefetchData.apply(this, arguments);
}

function _prefetchData() {
  _prefetchData = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee6(path) {
    var _ref6,
        priority,
        routeInfo,
        _args6 = arguments;

    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _ref6 = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {}, priority = _ref6.priority;
            _context6.next = 3;
            return getRouteInfo(path, {
              priority: priority
            });

          case 3:
            routeInfo = _context6.sent;

            if (routeInfo) {
              _context6.next = 6;
              break;
            }

            return _context6.abrupt("return");

          case 6:
            if (!routeInfo.sharedData) {
              _context6.next = 8;
              break;
            }

            return _context6.abrupt("return", (0, _utils.getFullRouteData)(routeInfo));

          case 8:
            // Request and build the props one by one
            routeInfo.sharedData = {}; // Request the template and loop over the routeInfo.sharedHashesByProp, requesting each prop

            _context6.next = 11;
            return Promise.all(Object.keys(routeInfo.sharedHashesByProp).map(
            /*#__PURE__*/
            function () {
              var _ref11 = (0, _asyncToGenerator2.default)(
              /*#__PURE__*/
              _regenerator.default.mark(function _callee5(key) {
                var hash, staticDataPath, absoluteStaticDataPath, _ref12, prop, _ref13, _prop;

                return _regenerator.default.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        hash = routeInfo.sharedHashesByProp[key]; // Check the sharedDataByHash first

                        if (sharedDataByHash[hash]) {
                          _context5.next = 26;
                          break;
                        }

                        _context5.prev = 2;
                        staticDataPath = (0, _utils.pathJoin)(process.env.REACT_STATIC_ASSETS_PATH, "staticData/".concat(hash, ".json"));
                        absoluteStaticDataPath = (0, _utils.makePathAbsolute)(staticDataPath); // If priority, get it immediately

                        if (!priority) {
                          _context5.next = 13;
                          break;
                        }

                        _context5.next = 8;
                        return _axios.default.get(absoluteStaticDataPath);

                      case 8:
                        _ref12 = _context5.sent;
                        prop = _ref12.data;
                        sharedDataByHash[hash] = prop;
                        _context5.next = 19;
                        break;

                      case 13:
                        // Non priority, share inflight requests and use pool
                        if (!inflightPropHashes[hash]) {
                          inflightPropHashes[hash] = requestPool.add(function () {
                            return _axios.default.get(absoluteStaticDataPath);
                          });
                        }

                        _context5.next = 16;
                        return inflightPropHashes[hash];

                      case 16:
                        _ref13 = _context5.sent;
                        _prop = _ref13.data;
                        // Place it in the cache
                        sharedDataByHash[hash] = _prop;

                      case 19:
                        _context5.next = 25;
                        break;

                      case 21:
                        _context5.prev = 21;
                        _context5.t0 = _context5["catch"](2);
                        console.log('Error: There was an error retrieving a prop for this route! hashID:', hash);
                        console.error(_context5.t0);

                      case 25:
                        if (!priority) {
                          delete inflightPropHashes[hash];
                        }

                      case 26:
                        // Otherwise, just set it as the key
                        routeInfo.sharedData[key] = sharedDataByHash[hash];

                      case 27:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, null, [[2, 21]]);
              }));

              return function (_x7) {
                return _ref11.apply(this, arguments);
              };
            }()));

          case 11:
            return _context6.abrupt("return", (0, _utils.getFullRouteData)(routeInfo));

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _prefetchData.apply(this, arguments);
}

function prefetchTemplate(_x5) {
  return _prefetchTemplate.apply(this, arguments);
}

function _prefetchTemplate() {
  _prefetchTemplate = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee7(path) {
    var _ref7,
        priority,
        routeInfo,
        Template,
        _args7 = arguments;

    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _ref7 = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {}, priority = _ref7.priority;
            // Clean the path
            path = (0, _utils.getRoutePath)(path); // Get route info so we can check if path has any data

            _context7.next = 4;
            return getRouteInfo(path, {
              priority: priority
            });

          case 4:
            routeInfo = _context7.sent;

            if (routeInfo) {
              // Make sure to use the path as defined in the routeInfo object here.
              // This will make sure 404 route info returned from getRouteInfo is handled correctly.
              registerTemplateForPath(routeInfo.path, routeInfo.template);
            } // Preload the template if available


            Template = templatesByPath[path];

            if (Template) {
              _context7.next = 10;
              break;
            }

            // If no template was found, mark it with an error
            templateErrorByPath[path] = true;
            return _context7.abrupt("return");

          case 10:
            if (routeInfo) {
              _context7.next = 12;
              break;
            }

            return _context7.abrupt("return", Template);

          case 12:
            if (!(!routeInfo.templateLoaded && Template.preload)) {
              _context7.next = 21;
              break;
            }

            if (!priority) {
              _context7.next = 18;
              break;
            }

            _context7.next = 16;
            return Template.preload();

          case 16:
            _context7.next = 20;
            break;

          case 18:
            _context7.next = 20;
            return requestPool.add(function () {
              return Template.preload();
            });

          case 20:
            routeInfo.templateLoaded = true;

          case 21:
            return _context7.abrupt("return", Template);

          case 22:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _prefetchTemplate.apply(this, arguments);
}

function prefetch(_x6) {
  return _prefetch.apply(this, arguments);
}

function _prefetch() {
  _prefetch = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee8(path) {
    var options,
        type,
        data,
        _ref14,
        _ref15,
        _args8 = arguments;

    return _regenerator.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
            // Clean the path
            path = (0, _utils.getRoutePath)(path);
            type = options.type; // If it's priority, we stop the queue temporarily

            if (options.priority) {
              requestPool.stop();
            }

            if (!(type === 'data')) {
              _context8.next = 10;
              break;
            }

            _context8.next = 7;
            return prefetchData(path, options);

          case 7:
            data = _context8.sent;
            _context8.next = 21;
            break;

          case 10:
            if (!(type === 'template')) {
              _context8.next = 15;
              break;
            }

            _context8.next = 13;
            return prefetchTemplate(path, options);

          case 13:
            _context8.next = 21;
            break;

          case 15:
            ;
            _context8.next = 18;
            return Promise.all([prefetchData(path, options), prefetchTemplate(path, options)]);

          case 18:
            _ref14 = _context8.sent;
            _ref15 = (0, _slicedToArray2.default)(_ref14, 1);
            data = _ref15[0];

          case 21:
            // If it was priority, start the queue again
            if (options.priority) {
              requestPool.start();
            }

            return _context8.abrupt("return", data);

          case 23:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _prefetch.apply(this, arguments);
}

function isPrefetchableRoute(path) {
  // when rendering static pages we dont need this at all
  if (typeof document === 'undefined') {
    return false;
  }

  if (prefetchExcludes.some(function (exclude) {
    if (typeof exclude === 'string' && path.startsWith(exclude)) {
      return true;
    }

    if ((0, _typeof2.default)(exclude) === 'object' && exclude.test(path)) {
      return true;
    }

    return false;
  })) {
    return false;
  }

  var _document = document,
      location = _document.location;
  var link;

  try {
    link = new URL(path, location.href);
  } catch (e) {
    // Return false on invalid URLs
    return false;
  } // if the hostname/port/protocol doesn't match its not a route link


  if (location.host !== link.host || location.protocol !== link.protocol) {
    return false;
  } // deny all files with extension other than .html


  if (link.pathname.includes('.') && !link.pathname.includes('.html')) {
    return false;
  }

  return true;
}

var plugins = {
  Root: function Root(Comp) {
    var hooks = (0, _utils.getHooks)(pluginHooks, 'Root');
    return (0, _utils.reduceHooks)(hooks, {
      sync: true
    })(Comp);
  },
  Routes: function Routes(Comp) {
    var hooks = (0, _utils.getHooks)(pluginHooks, 'Routes');
    return (0, _utils.reduceHooks)(hooks, {
      sync: true
    })(Comp);
  }
};
exports.plugins = plugins;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,