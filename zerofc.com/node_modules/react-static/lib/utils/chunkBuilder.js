"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absoluteToRelativeChunkName = exports.chunkNameFromFile = void 0;

var _path = _interopRequireDefault(require("path"));

var chunkNameFromFile = function chunkNameFromFile(filename) {
  var chunkName = filename.replace(_path.default.extname(filename), '') // extension
  .replace(new RegExp("[".concat(_path.default.sep, "]"), 'g'), '-'); // slash to -

  if (chunkName[0] === '-') {
    return chunkName.substr(1);
  }

  return chunkName;
};

exports.chunkNameFromFile = chunkNameFromFile;

var absoluteToRelativeChunkName = function absoluteToRelativeChunkName(ROOT, chunkName) {
  var pathPrefix = ROOT.replace(new RegExp("[".concat(_path.default.sep, "]"), 'g'), '-').substr(1); // inner components can simply be added aswell

  if (!chunkName.startsWith(pathPrefix)) {
    return chunkName;
  } // the templates starts with the absolute path, thats the ones we want to replace


  var relativeChunkName = chunkName.replace(new RegExp("".concat(pathPrefix), 'g'), '');

  if (relativeChunkName.startsWith('-')) {
    relativeChunkName = relativeChunkName.substr(1);
  } // cut of the extension if any


  if (relativeChunkName.indexOf('.')) {
    relativeChunkName = relativeChunkName.substr(0, relativeChunkName.indexOf('.'));
  }

  return relativeChunkName;
};

exports.absoluteToRelativeChunkName = absoluteToRelativeChunkName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jaHVua0J1aWxkZXIuanMiXSwibmFtZXMiOlsiY2h1bmtOYW1lRnJvbUZpbGUiLCJmaWxlbmFtZSIsImNodW5rTmFtZSIsInJlcGxhY2UiLCJwYXRoIiwiZXh0bmFtZSIsIlJlZ0V4cCIsInNlcCIsInN1YnN0ciIsImFic29sdXRlVG9SZWxhdGl2ZUNodW5rTmFtZSIsIlJPT1QiLCJwYXRoUHJlZml4Iiwic3RhcnRzV2l0aCIsInJlbGF0aXZlQ2h1bmtOYW1lIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRU8sSUFBTUEsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFBQyxRQUFRLEVBQUk7QUFDM0MsTUFBTUMsU0FBUyxHQUFHRCxRQUFRLENBQ3ZCRSxPQURlLENBQ1BDLGNBQUtDLE9BQUwsQ0FBYUosUUFBYixDQURPLEVBQ2lCLEVBRGpCLEVBQ3FCO0FBRHJCLEdBRWZFLE9BRmUsQ0FFUCxJQUFJRyxNQUFKLFlBQWVGLGNBQUtHLEdBQXBCLFFBQTRCLEdBQTVCLENBRk8sRUFFMkIsR0FGM0IsQ0FBbEIsQ0FEMkMsQ0FHTzs7QUFFbEQsTUFBSUwsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQixHQUFyQixFQUEwQjtBQUN4QixXQUFPQSxTQUFTLENBQUNNLE1BQVYsQ0FBaUIsQ0FBakIsQ0FBUDtBQUNEOztBQUVELFNBQU9OLFNBQVA7QUFDRCxDQVZNOzs7O0FBWUEsSUFBTU8sMkJBQTJCLEdBQUcsU0FBOUJBLDJCQUE4QixDQUFDQyxJQUFELEVBQU9SLFNBQVAsRUFBcUI7QUFDOUQsTUFBTVMsVUFBVSxHQUFHRCxJQUFJLENBQUNQLE9BQUwsQ0FBYSxJQUFJRyxNQUFKLFlBQWVGLGNBQUtHLEdBQXBCLFFBQTRCLEdBQTVCLENBQWIsRUFBK0MsR0FBL0MsRUFBb0RDLE1BQXBELENBQ2pCLENBRGlCLENBQW5CLENBRDhELENBSzlEOztBQUNBLE1BQUksQ0FBQ04sU0FBUyxDQUFDVSxVQUFWLENBQXFCRCxVQUFyQixDQUFMLEVBQXVDO0FBQ3JDLFdBQU9ULFNBQVA7QUFDRCxHQVI2RCxDQVU5RDs7O0FBQ0EsTUFBSVcsaUJBQWlCLEdBQUdYLFNBQVMsQ0FBQ0MsT0FBVixDQUN0QixJQUFJRyxNQUFKLFdBQWNLLFVBQWQsR0FBNEIsR0FBNUIsQ0FEc0IsRUFFdEIsRUFGc0IsQ0FBeEI7O0FBS0EsTUFBSUUsaUJBQWlCLENBQUNELFVBQWxCLENBQTZCLEdBQTdCLENBQUosRUFBdUM7QUFDckNDLElBQUFBLGlCQUFpQixHQUFHQSxpQkFBaUIsQ0FBQ0wsTUFBbEIsQ0FBeUIsQ0FBekIsQ0FBcEI7QUFDRCxHQWxCNkQsQ0FvQjlEOzs7QUFDQSxNQUFJSyxpQkFBaUIsQ0FBQ0MsT0FBbEIsQ0FBMEIsR0FBMUIsQ0FBSixFQUFvQztBQUNsQ0QsSUFBQUEsaUJBQWlCLEdBQUdBLGlCQUFpQixDQUFDTCxNQUFsQixDQUNsQixDQURrQixFQUVsQkssaUJBQWlCLENBQUNDLE9BQWxCLENBQTBCLEdBQTFCLENBRmtCLENBQXBCO0FBSUQ7O0FBRUQsU0FBT0QsaUJBQVA7QUFDRCxDQTdCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmV4cG9ydCBjb25zdCBjaHVua05hbWVGcm9tRmlsZSA9IGZpbGVuYW1lID0+IHtcbiAgY29uc3QgY2h1bmtOYW1lID0gZmlsZW5hbWVcbiAgICAucmVwbGFjZShwYXRoLmV4dG5hbWUoZmlsZW5hbWUpLCAnJykgLy8gZXh0ZW5zaW9uXG4gICAgLnJlcGxhY2UobmV3IFJlZ0V4cChgWyR7cGF0aC5zZXB9XWAsICdnJyksICctJykgLy8gc2xhc2ggdG8gLVxuXG4gIGlmIChjaHVua05hbWVbMF0gPT09ICctJykge1xuICAgIHJldHVybiBjaHVua05hbWUuc3Vic3RyKDEpXG4gIH1cblxuICByZXR1cm4gY2h1bmtOYW1lXG59XG5cbmV4cG9ydCBjb25zdCBhYnNvbHV0ZVRvUmVsYXRpdmVDaHVua05hbWUgPSAoUk9PVCwgY2h1bmtOYW1lKSA9PiB7XG4gIGNvbnN0IHBhdGhQcmVmaXggPSBST09ULnJlcGxhY2UobmV3IFJlZ0V4cChgWyR7cGF0aC5zZXB9XWAsICdnJyksICctJykuc3Vic3RyKFxuICAgIDFcbiAgKVxuXG4gIC8vIGlubmVyIGNvbXBvbmVudHMgY2FuIHNpbXBseSBiZSBhZGRlZCBhc3dlbGxcbiAgaWYgKCFjaHVua05hbWUuc3RhcnRzV2l0aChwYXRoUHJlZml4KSkge1xuICAgIHJldHVybiBjaHVua05hbWVcbiAgfVxuXG4gIC8vIHRoZSB0ZW1wbGF0ZXMgc3RhcnRzIHdpdGggdGhlIGFic29sdXRlIHBhdGgsIHRoYXRzIHRoZSBvbmVzIHdlIHdhbnQgdG8gcmVwbGFjZVxuICBsZXQgcmVsYXRpdmVDaHVua05hbWUgPSBjaHVua05hbWUucmVwbGFjZShcbiAgICBuZXcgUmVnRXhwKGAke3BhdGhQcmVmaXh9YCwgJ2cnKSxcbiAgICAnJ1xuICApXG5cbiAgaWYgKHJlbGF0aXZlQ2h1bmtOYW1lLnN0YXJ0c1dpdGgoJy0nKSkge1xuICAgIHJlbGF0aXZlQ2h1bmtOYW1lID0gcmVsYXRpdmVDaHVua05hbWUuc3Vic3RyKDEpXG4gIH1cblxuICAvLyBjdXQgb2YgdGhlIGV4dGVuc2lvbiBpZiBhbnlcbiAgaWYgKHJlbGF0aXZlQ2h1bmtOYW1lLmluZGV4T2YoJy4nKSkge1xuICAgIHJlbGF0aXZlQ2h1bmtOYW1lID0gcmVsYXRpdmVDaHVua05hbWUuc3Vic3RyKFxuICAgICAgMCxcbiAgICAgIHJlbGF0aXZlQ2h1bmtOYW1lLmluZGV4T2YoJy4nKVxuICAgIClcbiAgfVxuXG4gIHJldHVybiByZWxhdGl2ZUNodW5rTmFtZVxufVxuIl19